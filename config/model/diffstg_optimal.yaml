name: diffstg

# Dimensions
T_p: 12
T_h: 12
V: ${data.num_vertices}
F: ${data.num_features}
week_len: 7
day_len: ${eval:'${data.points_per_hour} * 24'}
d_h: 32

# Diffusion parameters
N: 200
sample_steps: 200
epsilon_theta: 'UGnet'
is_label_condition: True
beta_end: 0.1
beta_schedule: 'quad'
sample_strategy: 'ddpm'

# How many samples at a time
n_samples: 8

# UGNet parameters
channel_multipliers: [1, 2]  # The list of channel numbers at each resolution.
supports_len: 2

# Conditioning
mask_ratio: 0.0

device_name: cuda
adj_matrix_filepath: ${data.adjacency_matrix_filepath}

eval:
  sample_steps: 40
  sample_strategy: ddim_multi

# Some extra parameters that I have not seen used but are in the config:
C: 32
n_channels: 32

# DiffSTG(
#   (eps_model): UGnet(
#     (down): ModuleList(
#       (0-1): 2 x DownBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Identity()
#           (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 32), eps=1e-05, elementwise_affine=True)
#         )
#       )
#       (2): Downsample(
#         (conv): Conv2d(32, 32, kernel_size=(1, 3), stride=(1, 2), padding=(0, 1))
#       )
#       (3): DownBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#             (shortcut): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#           (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 64), eps=1e-05, elementwise_affine=True)
#         )
#       )
#       (4): DownBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Identity()
#           (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 64), eps=1e-05, elementwise_affine=True)
#         )
#       )
#     )
#     (middle): MiddleBlock(
#       (res1): ResidualBlock(
#         (tcn1): TcnBlock(
#           (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#           (chomp): Chomp()
#           (drop): Dropout(p=0.0, inplace=False)
#           (net): Sequential(
#             (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (1): Chomp()
#             (2): Dropout(p=0.0, inplace=False)
#           )
#         )
#         (tcn2): TcnBlock(
#           (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#           (chomp): Chomp()
#           (drop): Dropout(p=0.0, inplace=False)
#           (net): Sequential(
#             (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (1): Chomp()
#             (2): Dropout(p=0.0, inplace=False)
#           )
#         )
#         (shortcut): Identity()
#         (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#         (spatial): SpatialBlock()
#         (norm): LayerNorm((170, 64), eps=1e-05, elementwise_affine=True)
#       )
#       (res2): ResidualBlock(
#         (tcn1): TcnBlock(
#           (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#           (chomp): Chomp()
#           (drop): Dropout(p=0.0, inplace=False)
#           (net): Sequential(
#             (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (1): Chomp()
#             (2): Dropout(p=0.0, inplace=False)
#           )
#         )
#         (tcn2): TcnBlock(
#           (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#           (chomp): Chomp()
#           (drop): Dropout(p=0.0, inplace=False)
#           (net): Sequential(
#             (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (1): Chomp()
#             (2): Dropout(p=0.0, inplace=False)
#           )
#         )
#         (shortcut): Identity()
#         (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#         (spatial): SpatialBlock()
#         (norm): LayerNorm((170, 64), eps=1e-05, elementwise_affine=True)
#       )
#     )
#     (up): ModuleList(
#       (0-1): 2 x UpBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#             (shortcut): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
#           (t_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 64), eps=1e-05, elementwise_affine=True)
#         )
#       )
#       (2): UpBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#             (shortcut): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
#           (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 32), eps=1e-05, elementwise_affine=True)
#         )
#       )
#       (3): Upsample(
#         (conv): ConvTranspose2d(32, 32, kernel_size=(1, 4), stride=(1, 2), padding=(0, 1))
#       )
#       (4-6): 3 x UpBlock(
#         (res): ResidualBlock(
#           (tcn1): TcnBlock(
#             (conv): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#             (shortcut): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
#           )
#           (tcn2): TcnBlock(
#             (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#             (chomp): Chomp()
#             (drop): Dropout(p=0.0, inplace=False)
#             (net): Sequential(
#               (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 2))
#               (1): Chomp()
#               (2): Dropout(p=0.0, inplace=False)
#             )
#           )
#           (shortcut): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
#           (t_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
#           (spatial): SpatialBlock()
#           (norm): LayerNorm((170, 32), eps=1e-05, elementwise_affine=True)
#         )
#       )
#     )
#     (x_proj): Conv2d(1, 32, kernel_size=(1, 1), stride=(1, 1))
#     (out): Sequential(
#       (0): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
#       (1): Linear(in_features=48, out_features=24, bias=True)
#     )
#     (time_ebedding_layer): TimeEmbeddingLayer()
#   )
# )


# Down i = 0; input.shape: torch.Size([512, 32, 170, 48]);
# Down i = 0; output.shape: torch.Size([512, 32, 170, 48]);

# Down i = 1; input.shape: torch.Size([512, 32, 170, 48]);
# Down i = 1; output.shape: torch.Size([512, 32, 170, 48]);

# Down i = 2; input.shape: torch.Size([512, 32, 170, 48]);
# Down i = 2; output.shape: torch.Size([512, 32, 170, 24]);

# Down i = 3; input.shape: torch.Size([512, 32, 170, 24]);
# Down i = 3; output.shape: torch.Size([512, 64, 170, 24]);

# Down i = 4; input.shape: torch.Size([512, 64, 170, 24]);
# Down i = 4; output.shape: torch.Size([512, 64, 170, 24]);

# Up i = 0; s.shape = torch.Size([512, 64, 170, 24]); x.shape: torch.Size([512, 64, 170, 24]); concat.shape: torch.Size([512, 128, 170, 24])
# Up i = 1; s.shape = torch.Size([512, 64, 170, 24]); x.shape: torch.Size([512, 64, 170, 24]); concat.shape: torch.Size([512, 128, 170, 24])
# Up i = 2; s.shape = torch.Size([512, 32, 170, 24]); x.shape: torch.Size([512, 64, 170, 24]); concat.shape: torch.Size([512, 96, 170, 24])
# Up i = 4; s.shape = torch.Size([512, 32, 170, 48]); x.shape: torch.Size([512, 32, 170, 48]); concat.shape: torch.Size([512, 64, 170, 48])
# Up i = 5; s.shape = torch.Size([512, 32, 170, 48]); x.shape: torch.Size([512, 32, 170, 48]); concat.shape: torch.Size([512, 64, 170, 48])
# Up i = 6; s.shape = torch.Size([512, 32, 170, 48]); x.shape: torch.Size([512, 32, 170, 48]); concat.shape: torch.Size([512, 64, 170, 48])
